{"ast":null,"code":"var _jsxFileName = \"/Users/yvxnne/Desktop/ibm-accelerate/to-do-list_week1-yvxnnechen/src/component/todos.js\";\nimport React from \"react\";\nimport \"../component/todos.css\"; // 1. This component formats and returns the list of todos.\n// 2. Treat the question mark like an if statement.\n// If the todos array has items in the list [todos.length], we want to return the list\n// Else, return a message saying \"You have no todo's left\"\n// 3. The map function is called to assign each array item with a key\n// 4. Think of lines 14-23 as a loop. For each todo in the todo list, we want to give the list item\n// a key, and it's own card shown in the UI\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Todos = _ref => {\n  let {\n    todos\n  } = _ref;\n  const todoList = todos.length ? todos.map(todo => {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              padding: \"50px\"\n            },\n            children: \"add todo content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this)\n    }, todo.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 11\n    }, this);\n  }) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 7\n  }, this); // Lastly, return the todoList constant that we created above to show all of the items on the screen.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todoCollection\",\n    style: {\n      padding: \"10px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 7\n  }, this);\n};\n\n_c = Todos;\nexport default Todos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"names":["React","Todos","todos","todoList","length","map","todo","padding","id"],"sources":["/Users/yvxnne/Desktop/ibm-accelerate/to-do-list_week1-yvxnnechen/src/component/todos.js"],"sourcesContent":["import React from \"react\";\nimport \"../component/todos.css\";\n\n// 1. This component formats and returns the list of todos.\n// 2. Treat the question mark like an if statement.\n// If the todos array has items in the list [todos.length], we want to return the list\n// Else, return a message saying \"You have no todo's left\"\n// 3. The map function is called to assign each array item with a key\n// 4. Think of lines 14-23 as a loop. For each todo in the todo list, we want to give the list item\n// a key, and it's own card shown in the UI\nconst Todos = ({ todos }) => {\n    const todoList = todos.length ? (\n      todos.map((todo) => {\n        return (\n          <Grid key={todo.id}>\n            <Card>\n              {/* Remember, we set the local state of this todo item when the user submits the form in \n              AddTodo.js. All we need to do is return the todo list item */}\n              <CardContent>\n                <span style={{ padding: \"50px\" }}>add todo content</span>\n              </CardContent>\n            </Card>\n          </Grid>\n        );\n      })\n    ) : (\n      <p>{/*Enter your message here if todo list is empty*/}</p>\n    );\n    // Lastly, return the todoList constant that we created above to show all of the items on the screen.\n    return (\n      <div className=\"todoCollection\" style={{ padding: \"10px\" }}>\n        {/*call todo list here*/}\n      </div>\n    );\n};\n  \nexport default Todos;\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,wBAAP,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,KAAK,GAAG,QAAe;EAAA,IAAd;IAAEC;EAAF,CAAc;EACzB,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,GACfF,KAAK,CAACG,GAAN,CAAWC,IAAD,IAAU;IAClB,oBACE,QAAC,IAAD;MAAA,uBACE,QAAC,IAAD;QAAA,uBAGE,QAAC,WAAD;UAAA,uBACE;YAAM,KAAK,EAAE;cAAEC,OAAO,EAAE;YAAX,CAAb;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA;MAHF;QAAA;QAAA;QAAA;MAAA;IADF,GAAWD,IAAI,CAACE,EAAhB;MAAA;MAAA;MAAA;IAAA,QADF;EAWD,CAZD,CADe,gBAef;IAAA;IAAA;IAAA;EAAA,QAfF,CADyB,CAkBzB;;EACA,oBACE;IAAK,SAAS,EAAC,gBAAf;IAAgC,KAAK,EAAE;MAAED,OAAO,EAAE;IAAX;EAAvC;IAAA;IAAA;IAAA;EAAA,QADF;AAKH,CAxBD;;KAAMN,K;AA0BN,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}